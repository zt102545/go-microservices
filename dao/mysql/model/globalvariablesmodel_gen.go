// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	globalVariablesFieldNames          = builder.RawFieldNames(&GlobalVariables{})
	globalVariablesRows                = strings.Join(globalVariablesFieldNames, ",")
	globalVariablesRowsExpectAutoSet   = strings.Join(stringx.Remove(globalVariablesFieldNames, "`id`"), ",")
	globalVariablesRowsWithPlaceHolder = strings.Join(stringx.Remove(globalVariablesFieldNames, "`id`"), "=?,") + "=?"
)

type (
	globalVariablesModel interface {
		Insert(ctx context.Context, data *GlobalVariables) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*GlobalVariables, error)
		Update(ctx context.Context, data *GlobalVariables) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultGlobalVariablesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GlobalVariables struct {
		Id          uint64       `db:"id"`
		Name        string       `db:"name"` // 配置名称
		Integer     int64        `db:"integer"`
		String      string       `db:"string"`
		Text        string       `db:"text"`
		Float       float64      `db:"float"`
		Data        string       `db:"data"`        // 配置数据
		Description string       `db:"description"` // 描述
		CreatedAt   sql.NullTime `db:"created_at"`
		UpdatedAt   sql.NullTime `db:"updated_at"`
	}
)

func newGlobalVariablesModel(conn sqlx.SqlConn) *defaultGlobalVariablesModel {
	return &defaultGlobalVariablesModel{
		conn:  conn,
		table: "`global_variables`",
	}
}

func (m *defaultGlobalVariablesModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGlobalVariablesModel) FindOne(ctx context.Context, id uint64) (*GlobalVariables, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", globalVariablesRows, m.table)
	var resp GlobalVariables
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGlobalVariablesModel) Insert(ctx context.Context, data *GlobalVariables) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, globalVariablesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Integer, data.String, data.Text, data.Float, data.Data, data.Description, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultGlobalVariablesModel) Update(ctx context.Context, data *GlobalVariables) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, globalVariablesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Integer, data.String, data.Text, data.Float, data.Data, data.Description, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultGlobalVariablesModel) tableName() string {
	return m.table
}
